// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array powOfTwo;
    static Array screen;
    static boolean blackPixel; // white = false, black = true


    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let blackPixel = true;

        let powOfTwo = Array.new(16);
        let powOfTwo[0] = 1;
        let powOfTwo[1] = 2;
        let powOfTwo[2] = 4;
        let powOfTwo[3] = 8;
        let powOfTwo[4] = 16;
        let powOfTwo[5] = 32;
        let powOfTwo[6] = 64;
        let powOfTwo[7] = 128;
        let powOfTwo[8] = 256;
        let powOfTwo[9] = 512;
        let powOfTwo[10] = 1024;
        let powOfTwo[11] = 2048;
        let powOfTwo[12] = 4096;
        let powOfTwo[13] = 8192;
        let powOfTwo[14] = 16384;
        let powOfTwo[15] = 16384 + 16384;
        return;

    }

    /** Erases the entire screen. */
    function void clearScreen() {
         var int i;
        let i = 0;
        while( i < 8192 ) {
            let screen[i] = false;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let blackPixel = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        // address = 32 * y+x/16
        // value = Memory.peek[16384+address]
        // set the (x%16)th bit to the current color
        // do Memory.poke(address,value)

        var int addr;
        var int value;
        var int bit;

        let addr = (y * 32) + (x / 16);
        // let value = Memory.peek(addr);
        // let bit = x & 15; //get (x%16)th bit
        let bit = x - ((x / 16) * 16);

        if(addr < 0 | addr > 8192) 
        {
            do Sys.error(7);
        }

        if(blackPixel)
        {
            let screen[addr] = screen[addr] | powOfTwo[bit];
        }
        else
        {
            let screen[addr] = screen[addr] & (~powOfTwo[bit]);
        }
        // do Memory.poke(addr, value);
        return;

        
    }

     /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b;

        if(x1 < 0 | x2 < 0 | x1 > 511 | x2 > 511) {
            do Sys.error(8);
        }
        if(y1 < 0 | y2 < 0 | y1 > 255 | y2 > 255) {
            do Sys.error(8);
        }

        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;

        if(dx = 0) {
            while(b < Math.abs(dy)) {
                if(dy > 0) {
                    do Screen.drawPixel(x1, y1 + b);
                } else {
                    do Screen.drawPixel(x1, y1 - b);
                }
                let b = b + 1;
            }
            return;
        } 
        
        if(dy = 0) {
            while(a < Math.abs(dx)) {
                if(dx > 0) {
                    do Screen.drawPixel(x1 + a, y1);
                } else {
                    do Screen.drawPixel(x1 - a, y1);
                }
                let a = a + 1;
            }
            return;
        }
        
        while(~(a > Math.abs(dx)) & ~(b > Math.abs(dy))) {
            if(dx < 0 & (dy < 0)) {
                do Screen.drawPixel(x1 - a, y1 - b);
            } else {
                if(dx < 0 & (dy > 0)) {
                    do Screen.drawPixel(x1 - a, y1 + b);
                } else {
                    if(dx > 0 & (dy < 0)) {
                        do Screen.drawPixel(x1 + a, y1 - b);
                    } else {
                        do Screen.drawPixel(x1 + a, y1 + b);
                    }
                }
            }
            if(a * Math.abs(dy) < (b * Math.abs(dx))) {
                let a = a + 1;
            } else {
                let b = b + 1;
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        if(x1 < 0 | x2 < 0 | x1 > 511 | x2 > 511) {
            do Sys.error(9);
        }
        if(y1 < 0 | y2 < 0 | y1 > 255 | y2 > 255) {
            do Sys.error(9);
        }

        while(~(y1 > y2)) {
            do Screen.drawLine(x1, y1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        // for each dy = -r to r do:
        //     drawLine(x-sqrt(r^2 - dy^2), y+dy , x+sqrt(r^2 - dy^2), y+dy)
        var int dy;
        var int sqrt;

        let dy = -r;
        while( ~(dy = r) )
        {
            let sqrt = Math.sqrt( (r*r) - (dy*dy) );
            do Screen.drawLine(x - sqrt, y + dy, x + sqrt, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
