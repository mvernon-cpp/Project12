// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static Array freeList;
    static int heap;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;        //heapBase
        let freeList = heap;
        let freeList[0] = 0;        //next
        let freeList[1] = 14335;    //length
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        /*
        search freeList using the best-fit or first-fit heuristics
            to obtain a segment with segment size >= size + 2
        if no such segment is found, return failure
        block = base address of the found space
        update the feeList and the filds of the block to account for the allocation
        return block 
        */

        var Array bestSegment;
        var Array segment;

        // find first-fit
        let bestSegment = freeList;
            while (bestSegment[1] < (size + 2)) 
            {
                if (bestSegment[0] = 0) 
                {
                    do Sys.error(6);
                    return 0;
                }
            let bestSegment = bestSegment[0];
        }

        let segment = bestSegment + ( bestSegment[1] - size );
        let segment[0] = 0;
        let segment[1] = size;


        // update freeList
        let bestSegment[1] = bestSegment[1] - (size + 2);

        // return the block address of the new segment
        return segment + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        /* append object to the end of the freeList */
         var Array block;
        let block = o - 2;
        // do Memory._checkHeapAddress(block);
        let block[0] = freeList;
        let freeList = block;
        return;
    }    
}
