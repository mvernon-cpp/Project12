// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str;
    field int length;
    field int maxLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {

        if( maxLength = 0 ) {
            let maxLength = 1;
        }

        let str = Array.new(maxLength);
        let length = 0;
        let maxLength = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (maxLength > 0) {
            do str.dispose();
        }
        do Memory.deAlloc(this);
        return;

    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length = 0) {
            do Sys.error(0);
        }
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        // val = 0
        // for (i=0 ... str.length) do
        //     d = integer value of str[i]
        //     val = val * 10 + d
        // return val

        var int val;
        var int index;
        var int position;
        var boolean neg;
        var char currChar;

        let val = 0;
        let index = 0;
        let neg = false;

        //check if number is zero
        if( charAt(0) = 45 )    //'-' ASCII is 45
        {
            let neg = true;
            let index = 1;
        }

        while( index < length )
        {
            let currChar = charAt(index);
            //check if digit
            if( (currChar > 47) & (currChar < 58))
            {
                let val = (val * 10 ) + (currChar - 48);
            }
            else
            {
                let index = length;
            }

            let index = index + 1;


        }
        
        if (neg)
        {
            let val = -val;
        }

        return val;
    }

/** Returns the char value of the given integer (must have 0<=value<=9) */
    function char digit_char(int i) {
        return i + 48;
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
        let length = 0;    // Clear string
        
        if( number < 0 ) {
            let number = -number;
            do appendChar(45);      // leading '-'
        }
        
        do do_set_int(number);
        return;
    }

    method void do_set_int(int number) {
        var int q;
        var int mod;
        var char c;
        
        let q = number / 10;
        let mod = number - (q*10);
        let c = String.digit_char(mod);
        
        if( number < 10 ) {
            do appendChar(c);
        }
        else {
            do do_set_int(q);
            do appendChar(c);
        }
        return;
    }
    // /** Sets this string to hold a representation of the given value. */
    // method void setInt(int val) {
    //     let length = 0;

    //     if ( val < 0 )
    //     {
    //         let val = -val;
    //         do appendChar(45);
    //     }

    //     do setIntRec(val);

    //     return;

    // }

    // method void setIntRec(int val) {
    //     // lastDigit = val % 10
    //     // c = character representing lastDigit
    //     // if(val < 10)
    //     //     return c (as a string)
    //     // else 
    //     //     return setInt(v/10).append(c)

    //     var int mod, c;
    //     // var char c;

    //     let mod = val - ( (val/10) * 10 );
    //     let c = mod + 48;

    //     if (val < 10 )
    //     {
    //         do appendChar(c);
    //     } 
    //     else
    //     {
    //         do setIntRec( val/10);
    //         do appendChar(c);
    //     }

    //     return;
    // }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
